[
  {
    "group": "Base",
    "snippets": [
      {
        "id": 2,
        "name": "BaseDelete.tsx",
        "content": "import { MyActionIconDelete } from \"aq-fe-framework/components\";\n\nexport default function BaseDelete({ id, code }: { id: number, code: string }) {\n  return (\n    <MyActionIconDelete contextData={code} onSubmit={() => { /* Add your submit logic here */ }} />\n  )\n}"
      },
      {
        "id": 3,
        "name": "BaseDeleteList.tsx",
        "content": "import { MyButtonDeleteList } from \"aq-fe-framework/components\";\n\nexport default function BaseDeleteList({ values }: { values: any }) {\n    return (\n        <MyButtonDeleteList\n            disabled={values.length === 0}\n            contextData={values.map((item: any) => item.code).join(\", \")}\n            onSubmit={() => { }}\n        />\n    )\n}"
      },
      {
        "id": 4,
        "name": "Page",
        "content": "'use client'\n\nimport { MyPageContent } from \"aq-fe-framework/components\";\n\nexport default function Page() {\n    return (\n        <MyPageContent>\n        </MyPageContent>\n    )\n}"
      },
      {
        "id": 5,
        "name": "BaseRead.tsx",
        "content": "'use client'\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  MyButton,\n  MyCenterFull,\n  MyDataTable,\n  MyFieldset\n} from \"aq-fe-framework/components\";\nimport { MRT_ColumnDef } from \"mantine-react-table\";\nimport { useMemo } from \"react\";\n\n\nexport default function BaseRead() {\n  const query = useQuery<IInfoViewModel[]>({\n    queryKey: ['BaseRead'],\n    queryFn: async () => []\n  });\n\n  const columns = useMemo<MRT_ColumnDef<IInfoViewModel>[]>(() => [\n    {\n      header: \"\",\n      accessorKey: \"\",\n    },\n  ], []);\n\n  return (\n    <MyFieldset title=\"\">\n      <MyDataTable\n        isError={query.isError}\n        isLoading={query.isLoading}\n        columns={columns}\n        data={query.data || []}\n        renderTopToolbarCustomActions={({ table }) => (\n          <MyCenterFull>\n            <AQButtonCreateByImportFile\n                form={useForm<any>({\n                  initialValues: {\n                    importedData: [],\n                  },\n                })}\n                onSubmit={() =>{}})}\n              />\n            <MyButton\n                leftSection={<IconTableExport />}\n                color=\"teal\"\n                size=\"sm\"\n                radius=\"sm\"\n                onClick={() => {\n                  notifications.show({\n                    title: \"Thông báo\",\n                    message:\n                      \"Chức năng này đang được phát triển, vui lòng quay lại sau.\",\n                    color: \"blue\",\n                    autoClose: 5000,\n                  });\n                }}\n              >\n                Export\n              </MyButton>\n            <BaseDeleteList\n              values={table\n                .getSelectedRowModel()\n                .flatRows.flatMap((item) => item.original)} />\n          </MyCenterFull>\n        )}\n        renderRowActions={({ row }) => (\n          <MyCenterFull>\n            Thao tác\n          </MyCenterFull>\n        )}\n      />\n    </MyFieldset>\n  );\n}"
      },
      {
        "id": 6,
        "name": "BaseButtonModal.tsx",
        "content": "'use client'\nimport { useDisclosure } from \"@mantine/hooks\";\nimport {\n  MyButtonModal,\n} from \"aq-fe-framework/components\";\n\n\n\nexport default function BaseButtonModal() {\n  const disc = useDisclosure();\n\n\n  return (\n    <MyButtonModal label=\"\" variant=\"transparent\" color=\"blue\" modalSize={\"90%\"} disclosure={disc}>\n     \n    </MyButtonModal>\n  );\n}"
      },
      {
        "id": 7,
        "name": "BaseCreateUpdate.tsx",
        "content": "import { useForm } from \"@mantine/form\";\nimport { MyButtonCreateUpdate } from \"aq-fe-framework/core\";\n\nexport default function BaseCreateUpdate({\n  values,\n}: {\n  values: I;\n}) {\n\n  const form = useForm<I>({\n    initialValues: {\n      ...values,\n    },\n    validate: {},\n  });\n\n\n  return (\n    <MyButtonCreateUpdate\n      modalProps={{\n        size: \"lg\",\n        title: \"\",\n      }}\n      form={form}\n      onSubmit={() => {}}\n      isUpdate={!!values}\n    >\n    \n    </MyButtonCreateUpdate>\n  );\n}"
      }
    ]
  },
  {
    "group": "Button",
    "snippets": [
      {
        "id": 1,
        "name": "Export Button",
        "content": "<MyButton\n                leftSection={<IconTableExport />}\n                color=\"teal\"\n                size=\"sm\"\n                radius=\"sm\"\n                onClick={() => {\n                  notifications.show({\n                    title: \"Thông báo\",\n                    message:\n                      \"Chức năng này đang được phát triển, vui lòng quay lại sau.\",\n                    color: \"blue\",\n                    autoClose: 5000,\n                  });\n                }}\n              >\n                Export\n              </MyButton>"
      },
      {
        "id": 2,
        "name": "Import Button",
        "content": "<AQButtonCreateByImportFile\n              form={useForm<any>({\n                initialValues: {\n                  importedData: [],\n                },\n              })}\n              onSubmit={() => { }}\n              />"
      }
    ]
  },
  {
    "group": "Tip",
    "snippets": [
      {
        "id": 1,
        "name": "Align input with a button",
        "content": "inputContainer={(children) => (\n              <Group align=\"flex-start\">\n                {children}\n                <MyButton />\n              </Group>\n            )}"
      },
      {
        "id": 2,
        "name": "Get Value for DeleteList",
        "content": "values={table.getSelectedRowModel().flatRows.flatMap(item => item.original)}"
      }
    ]
  },
  {
    "group": "MyComponent",
    "snippets": [
      {
        "id": 1,
        "name": "RenderStatus",
        "content": "import { Badge } from \"@mantine/core\";\nimport {\n  IconBan,\n  IconCheck,\n  IconClock,\n  IconHelpCircle,\n  IconX,\n} from \"@tabler/icons-react\";\n\ninterface RenderStatusProps {\n  value: string;\n  successes?: string[];\n  failures?: string[];\n  inProgress?: string[];\n  canceled?: string[];\n}\n\nexport function RenderStatus({\n  value,\n  successes = [],\n  failures = [],\n  inProgress = [],\n  canceled = [],\n}: RenderStatusProps) {\n  const getColor = () => {\n    if (successes.includes(value)) return \"green\";     // trạng thái tốt\n    if (failures.includes(value)) return \"red\";        // trạng thái tiêu cực\n    if (inProgress.includes(value)) return \"blue\";     // đang diễn ra\n    if (canceled.includes(value)) return \"gray\";       // bị hủy\n    return \"default\";\n  };\n\n  const getIcon = () => {\n    if (successes.includes(value)) return <IconCheck size={16} />;\n    if (failures.includes(value)) return <IconX size={16} />;\n    if (inProgress.includes(value)) return <IconClock size={16} />;\n    if (canceled.includes(value)) return <IconBan size={16} />;\n    return <IconHelpCircle size={16} />;\n  };\n\n  return (\n    <Badge\n      w=\"100%\"\n      h={25}\n      leftSection={getIcon()}\n      variant=\"light\"\n      color={getColor()}\n      radius=\"md\"\n      fw={700}\n    >\n      {value}\n    </Badge>\n  );\n}"
      },
      {
        "id": 2,
        "name": "StatusBadge",
        "content": "<Badge\n      w=\"100%\"\n      h={25}\n      leftSection={)}\n      variant=\"light\"\n      color={}\n      radius=\"md\"\n      fw={700}\n    >\n      {value}\n    </Badge>"
      }
    ]
  },
  {
    "group": "HandleFile",
    "snippets": [
      {
        "id": 1,
        "name": "interface",
        "content": "attachFilePath?: string; //filePath trên server\n  attachFile?: File; // Dùng để lưu vào trong  MyFileInput\n  attachFileViewModel?: { // Dùng để upload lên server\n    fileName?: string;\n    fileExtension?: string;\n    fileBase64String?: string;\n  };"
      },
      {
        "id": 2,
        "name": "MyFileInput",
        "content": "<MyFileInput\n                label=\"File đính kèm\"\n                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                value={form.values.attachFile}\n                onChange={async (file) => {\n                  if (!file) return;\n                  form.setFieldValue(\n                    \"attachFileViewModel\",\n                    await utils_file_fileToAQDocumentType(file)\n                  );\n                }}\n              />"
      },
      {
        "id": 3,
        "name": "validate",
        "content": "attachFileViewModel: (value) =>\n        value && value.fileBase64String && value.fileBase64String.length > 0\n          ? null\n          : \"Vui lòng chọn file\","
      },
      {
        "id": 4,
        "name": "display file",
        "content": "<MyButtonViewPDF filePath={cell.getValue<string>()} />"
      }
    ]
  }
]